{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 1,
      "content": {
        "json": "# Retention\n\nHow well does your app retain users? This workbook provides three different methods for analyzing retention, based on your team's goals:\n\n- **Rolling retention** for a simple way to understand retention over time.\n- **N-period retention** for apps like games where you want users to develop a daily or other n-period habit.\n- **Unbounded retention** for understanding how many people used your app after one week __or later__, for example.\n\nEdit the parameters below to customize this workbook for your app."
      }
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [],
        "parameters": [
          {
            "isRequired": true,
            "name": "CohortSize",
            "value": "7d",
            "description": "1d: Daily, 7d: Weekly, 30/28d: Monthly",
            "id": "e62098ae-ac3f-4800-8e62-3e7d9a052e56",
            "type": 1
          },
          {
            "isRequired": true,
            "name": "CohortsToAnalyze",
            "value": "6",
            "description": "Number of cohort periods to analyze",
            "id": "fa4b29d9-bfc1-46e3-98f1-3cba05afbea3",
            "type": 1
          },
          {
            "isRequired": true,
            "name": "CohortingActivities",
            "value": "'*'",
            "id": "97ae2ae5-ec95-455b-bac2-36caf2db61db",
            "type": 1
          },
          {
            "name": "CohortingFilters",
            "id": "94bacf68-78db-4755-8a40-c2702dea4018",
            "type": 1
          },
          {
            "isRequired": true,
            "name": "RetainingActivities",
            "value": "'*'",
            "id": "6cb4afed-7dac-4608-892b-154f4943ddb6",
            "type": 1
          },
          {
            "name": "RetainingFilters",
            "id": "0cc5211a-557e-4648-9569-1236bf16559f",
            "type": 1
          }
        ]
      }
    },
    {
      "type": 1,
      "content": {
        "json": "Change the `CohortSize` parameter to set the right period for your analysis:\n\n- **1d**: for N-day retention.\n- **7d**: for N-week retention.\n- **30d**: for N-month retention."
      }
    },
    {
      "type": 1,
      "content": {
        "json": "## Rolling Retention\n\nRolling retention is the simplest way to analyze retention: \"What percentage of people who did `Activities` in the preceding `CohortSize` time period came back to do `Activities` in the current `CohortSize` time period?\""
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let CohortsToAnalyze = {CohortsToAnalyze};\r\nlet monthDefinition = {CohortSize};\r\nlet timeRange = monthDefinition * CohortsToAnalyze;\r\nlet hlls = union customEvents, pageViews\r\n| where timestamp >= startofmonth(now() - timeRange - 2 * monthDefinition)\r\n| where name in ({CohortingActivities}) or '*' in ({CohortingActivities})\r\n{CohortingFilters}\r\n| summarize Hlls = hll(user_Id) by bin(timestamp, 1d)\r\n| project DaysToMerge = timestamp, Hlls;\r\nlet churnSeriesWithHllsToInclude = materialize(range d from 0d to (timeRange + monthDefinition) step 1d\r\n| extend Day = startofday(now() - d)\r\n| extend R = range(0d, monthDefinition - 1d, 1d)\r\n| mvexpand R\r\n| extend ThisMonth = Day - totimespan(R)\r\n| extend LastMonth = Day - monthDefinition - totimespan(R)\r\n| project Day, ThisMonth, LastMonth);\r\nchurnSeriesWithHllsToInclude\r\n| extend DaysToMerge = ThisMonth\r\n| join kind= inner (hlls) on DaysToMerge \r\n| project Day, ThisMonthHlls = Hlls\r\n| union (\r\nchurnSeriesWithHllsToInclude\r\n| extend DaysToMerge = LastMonth\r\n| join kind= inner (hlls) on DaysToMerge\r\n| project Day, LastMonthHlls = Hlls)\r\n| summarize ThisMonth = hll_merge(ThisMonthHlls), LastMonth = hll_merge(LastMonthHlls) by Day\r\n| evaluate dcount_intersect(ThisMonth, LastMonth)\r\n| where Day >= startofday(now() - timeRange)\r\n| extend ChurnedUsers = (dcount_hll(LastMonth) - s1) // Last Months Users - Returning Users\r\n| project Day, [\"Retention Rate\"] = iff((s1 + ChurnedUsers) == 0, 0.0, 100.0 * s1 / (s1 + ChurnedUsers))\r\n",
        "showQuery": false,
        "size": 0,
        "visualization": "timechart"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "## N-Period Retention\n\nN-period retention measures how many of your users come back to your app in a particular period after they perform an interesting activity you are analyzing. For instance, you could be measuring the number of users who returned to use your app on the 10th day from the day they first downloaded it. Seeing the retention trend for days 1-10 will give you an indication of the stickiness of your app. \n\nN-day retention is well-suited for gaming apps, or other kinds of app where you’re trying to get users to develop a daily habit.\n\nCustomize the value of N in the `CohortSize` parameter above."
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let periodsToAnalyze = {CohortsToAnalyze};\nlet cohortSize = {CohortSize};\nlet cohortUnit = case(cohortSize == 30d or cohortSize == 28d, \"month\", cohortSize == 7d, \"week\", \"day\");\nlet timeRange = startofday(now()) - case(cohortSize == 30d or cohortSize == 28d, startofmonth(now() - periodsToAnalyze * cohortSize), cohortSize == 7d, startofweek(now() - periodsToAnalyze * cohortSize), startofday(now() - periodsToAnalyze * cohortSize));\nlet cohorts = union customEvents, pageViews\n| where timestamp > startofday(now() - timeRange)\n| where name in ({CohortingActivities}) or '*' in ({CohortingActivities})\n{CohortingFilters}\n| extend Cohort = case(cohortSize == 30d or cohortSize == 28d, startofmonth(timestamp), cohortSize == 7d, startofweek(timestamp), startofday(timestamp))\n| summarize EarliestInCohort = min(startofday(timestamp)) by user_Id, Cohort\n| summarize UsersInCohort = hll(user_Id) by EarliestInCohort, Cohort;\nlet users = union customEvents, pageViews\n| where timestamp > startofday(now() - timeRange)\n| where name in ({RetainingActivities}) or '*' in ({RetainingActivities})\n{RetainingFilters}\n| summarize Users = hll(user_Id) by Day = startofday(timestamp);\nlet Retention = materialize(range i from 0d to timeRange step 1d\n| extend Day = startofday(now() - i)\n| extend RetentionRange = range(1d, timeRange, 1d)\n| mvexpand RetentionRange limit 10000\n| extend RetentionDay = Day + totimespan(RetentionRange)\n| extend RetentionWeek = toint(totimespan(RetentionRange) / cohortSize)\n| where RetentionDay <= startofday(now())\n| project Day, RetentionDay, RetentionWeek\n| join kind=inner\n(\n    users\n    | project UsersOnDay = Users, RetentionDay = Day\n) on RetentionDay\n| summarize UsersForRetentionWeek = hll_merge(UsersOnDay) by Day, RetentionWeek\n| join kind=inner\n(\n    cohorts\n    | project UsersInCohort, Cohort, Day = EarliestInCohort\n)\non Day\n| project-away Day1\n| evaluate dcount_intersect(UsersInCohort, UsersForRetentionWeek)\n| summarize RetainedUsers = sum(s1) by Cohort, RetentionWeek\n);\ncohorts\n| summarize UsersInCohort = hll_merge(UsersInCohort) by Cohort\n| project Cohort, CohortUsers = dcount_hll(UsersInCohort) \n| join kind=inner (Retention) on Cohort\n| project-away Cohort1\n| extend RetentionRate = round(100.0 * RetainedUsers / CohortUsers, 2)\n| project-away RetainedUsers \n| order by Cohort asc, RetentionWeek asc\n| extend RetentionWeek = case(RetentionWeek == 0, strcat(\"<1 \", cohortUnit), strcat(\"+\", RetentionWeek, \" \", cohortUnit))\n| extend month = monthofyear(Cohort)\n| extend friendlyMonthName = case(month == 1, 'January', month == 2, 'February', month == 3, 'March', month == 4, 'April', month == 5, 'May', month == 6, 'June', month == 7, 'July', month == 8, 'August', month == 9, 'September', month == 10, 'October', month == 11, 'November', 'December')\n| extend dayofweek = dayofweek(Cohort)\n| extend friendlyDayOfweek = case(dayofweek == 0d, \"Sun\", dayofweek == 1d, \"Mon\", dayofweek == 2d, \"Tue\", dayofweek == 3d, \"Wed\", dayofweek == 4d, \"Thu\", dayofweek == 5d, \"Fri\", \"Sat\")\n| extend Cohort = iff(cohortSize == 1d, strcat(friendlyMonthName, ' ', dayofmonth(Cohort), ' (', friendlyDayOfweek, ')'), strcat(friendlyMonthName, ' ', dayofmonth(Cohort)))\n| project-away month, friendlyMonthName, dayofweek, friendlyDayOfweek\n| project Cohort, ['Users'] = CohortUsers, RetentionWeek, RetentionRate\n| evaluate pivot(RetentionWeek, sum(RetentionRate))",
        "showQuery": false,
        "size": 0
      }
    },
    {
      "type": 1,
      "content": {
        "json": "## Unbounded Retention\nUnbounded retention shows you the percentage of users who came back on a specific day **or anytime after that day**. It is useful in cases where you want to see how many new users returning to your app after the first week."
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let periodsToAnalyze = {CohortsToAnalyze};\r\nlet cohortSize = {CohortSize};\r\nlet cohortUnit = case(cohortSize == 30d or cohortSize == 28d, \"month\", cohortSize == 7d, \"week\", \"day\");\r\nlet timeRange = startofday(now()) - case(cohortSize == 30d or cohortSize == 28d, startofmonth(now() - periodsToAnalyze * cohortSize), cohortSize == 7d, startofweek(now() - periodsToAnalyze * cohortSize), startofday(now() - \r\nperiodsToAnalyze * cohortSize));\r\nlet totalWeeks = toint(timeRange / cohortSize);\r\nlet cohorts = union customEvents, pageViews\r\n| where timestamp > startofday(now() - timeRange)\r\n| where name in ({CohortingActivities}) or '*' in ({CohortingActivities})\r\n{CohortingFilters}\r\n| extend Cohort = case(cohortSize == 30d or cohortSize == 28d, startofmonth(timestamp), cohortSize == 7d, startofweek(timestamp), startofday(timestamp))\r\n| summarize EarliestInCohort = min(startofday(timestamp)) by user_Id, Cohort\r\n| summarize UsersInCohort = hll(user_Id) by EarliestInCohort, Cohort;\r\nlet users = union customEvents, pageViews\r\n| where timestamp > startofday(now() - timeRange)\r\n| where name in ({RetainingActivities}) or '*' in ({RetainingActivities})\r\n{RetainingFilters}\r\n| summarize Users = hll(user_Id) by Day = startofday(timestamp);\r\nlet Retention = materialize(range i from 1d to timeRange step 1d\r\n| extend Day = startofday(now() - i)\r\n| extend WeeksUntilNow = toint(i / cohortSize)\r\n| extend Weeks = range(0, WeeksUntilNow, 1)\r\n| mvexpand Weeks limit 10000\r\n| extend WeeksLater = Day + toint(Weeks) * cohortSize\r\n| project-away WeeksUntilNow\r\n| extend Range = range(1d, i, 1d)\r\n| mvexpand Range limit 10000\r\n| extend RetentionDay = Day + totimespan(Range)\r\n| where RetentionDay > WeeksLater\r\n| project Day, RetentionDay, Weeks\r\n| join kind=inner\r\n(\r\n    users\r\n    | project UsersOnDay = Users, RetentionDay = Day\r\n) on RetentionDay\r\n| summarize ReturningUsers = hll_merge(UsersOnDay) by ForDay = Day, AfterWeek = toint(Weeks)\r\n| project ForDay, AfterWeek, ReturningUsers\r\n| join kind=inner\r\n(\r\n    cohorts\r\n    | project UsersInCohort, Cohort, ForDay = EarliestInCohort\r\n)\r\non ForDay\r\n| project-away ForDay1\r\n| evaluate dcount_intersect(UsersInCohort, ReturningUsers)\r\n| summarize RetainedUsers = sum(s1) by Cohort, AfterWeek\r\n);\r\ncohorts\r\n| summarize UsersInCohort = hll_merge(UsersInCohort) by Cohort\r\n| project Cohort, CohortUsers = dcount_hll(UsersInCohort) \r\n| join kind=inner (Retention) on Cohort\r\n| project-away Cohort1\r\n| extend RetentionRate = round(100.0 * RetainedUsers / CohortUsers, 2)\r\n| project-away RetainedUsers \r\n//| extend AfterWeek = AfterWeek + totalWeeks - toint((now() - Cohort) / cohortSize)\r\n| order by Cohort asc, AfterWeek asc\r\n| extend AfterWeek = strcat(AfterWeek, \"-\", cohortUnit, \" +\")\r\n| extend month = monthofyear(Cohort)\r\n| extend friendlyMonthName = case(month == 1, 'January', month == 2, 'February', month == 3, 'March', month == 4, 'April', month == 5, 'May', month == 6, 'June', month == 7, 'July', month == 8, 'August', month == 9, 'September', month == 10, 'October', month == 11, 'November', 'December')\r\n| extend dayofweek = dayofweek(Cohort)\r\n| extend friendlyDayOfweek = case(dayofweek == 0d, \"Sun\", dayofweek == 1d, \"Mon\", dayofweek == 2d, \"Tue\", dayofweek == 3d, \"Wed\", dayofweek == 4d, \"Thu\", dayofweek == 5d, \"Fri\", \"Sat\")\r\n| extend Cohort = iff(cohortSize == 1d, strcat(friendlyMonthName, ' ', dayofmonth(Cohort), ' (', friendlyDayOfweek, ')'), strcat(friendlyMonthName, ' ', dayofmonth(Cohort)))\r\n| project Cohort, ['Users'] = CohortUsers, AfterWeek, RetentionRate\r\n| evaluate pivot(AfterWeek, sum(RetentionRate))",
        "showQuery": false,
        "size": 0
      }
    }
  ]
}